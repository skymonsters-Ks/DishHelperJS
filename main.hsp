#define global APPNAME "DishHelperJS"
#define global APPVER  "v.0.1.7.0"
#define global SITEURL "https://github.com/skymonsters-Ks/DishHelperJS"

#packopt name "hsp3dh_js"
#packopt icon "ico.ico"
#packopt manifest "app.manifest"
#packopt xsize 1
#packopt ysize 1
#packopt hide 1

#pack "lang_en.txt"

#include "hsp3utf.as"
#include "hspcmp.as"

#include "mod_util.hsp"
#include "mod_dpi.hsp"

#include "strmap.hsp"

#include "mod_app.hsp"

#uselib "user32"
#func GetSysColorBrush "GetSysColorBrush" int
#func MessageBeep "MessageBeep" int
#func MessageBoxIndirect "MessageBoxIndirectA" var
#func GetDC "GetDC" int
#func ReleaseDC "ReleaseDC" int, int
#uselib "gdi32"
#func SetBkMode "SetBkMode" int, int
#func GetStockObject "GetStockObject" int
#func SelectObject "SelectObject" int, int
#func Rectangle "Rectangle" int, int, int, int, int
#uselib "shell32"
#func dragAcceptFiles "DragAcceptFiles" int, int
#func dragQueryFile "DragQueryFileW" int, int, wptr, int
#func dragFinish "DragFinish" int

#define HSP3DISH_INI "hsp3dish.ini"
#define DIR_HSPJS "hsp3js"

#const WIN_SX 400
#const WIN_SY 188
#const SUBDIRLV_MAX 4


	exeDir = dir_exe + "\\"

	loadCmdline

	if (getCmdlinePrm("ver")) {
		dispVerDlg
	}

	setLang getCmdlineVal("lang")
	initStrmap

	sdim srcFile, 512
	srcFile = getCmdlinePath()

	sdim outDir, 512
	outDir = getCmdlineVal("outdir")
	if (outDir == "") {
		outDir = "public"
	}

	; デバッグモードで出力
	fDebugMode = getCmdlinePrm("debug")

	; .html のファイル名を index にする
	fNameIndex = getCmdlinePrm("index")

	; <canvas>のサイズをクライアントエリアにフィットさせる
	fAutoResize = getCmdlinePrm("resize")

	; .ax だけを出力
	fAxOnly = getCmdlinePrm("axonly")

	; メインウィンドウを使わないでコンパイル・出力する
	fNoWin = getCmdlinePrm("nowin")

	if (fNoWin) {
		gosub *export
		end
	} else {
		#ifdef _debug
			screen 0, 1, 1, screen_hide
		#endif
		newmod dpiMain, mod_dpi, WIN_SX, WIN_SY, 16
		title APPNAME + " " + APPVER
		onexit gosub *byebye
		onkey gosub *evKey
		oncmd gosub *evPaint, $f ; WM_PAINT
		oncmd gosub *evGetMinMaxInfo, $24 ; WM_GETMINMAXINFO
		oncmd gosub *evCtlColorStatic, $138 ; WM_CTLCOLORSTATIC
		oncmd gosub *evDpiChanged, $2e0 ; WM_DPICHANGED
		oncmd gosub *evDropFiles, $233 ; WM_DROPFILES
		DragAcceptFiles hwnd, 1
		createDialog 1, 0
		gsel 0

		dpi_font dpiMain, strmap(STR_OBJFONT), 12

		setStaticText dpiMain, strmap(STR_SCRIPTPATH), 8, 7
		hTextSrcPath = objinfo_hwnd(stat)
		if (srcFile == "") {
			srcFile = strmap(STR_DEFSRCINPUT)
		}
		setInput dpiMain, srcFile, 8, 22, 364, 22
		hSrcFile = objinfo_hwnd(stat)
		setButton dpiMain, *selectScrFile, strmap(STR_REFBTN), 372, 22, 20, 22
		
		setStaticText dpiMain, strmap(STR_OUTDIR), 8, 47
		hTextOutDir = objinfo_hwnd(stat)
		setInput dpiMain, outDir, 8, 62, 384, 22
		hOutDir = objinfo_hwnd(stat)
		
		setCheckBox dpiMain, cbDebugMode,  fDebugMode,  strmap(STR_DEBUGOUT), 8, 96, *evCheck
		setCheckBox dpiMain, cbAxOnly,     fAxOnly,     strmap(STR_AXONLYOUT), 204, 96, *evCheck
		setCheckBox dpiMain, cbAutoResize, fAutoResize, strmap(STR_CANVASRESIZE), 8, 116
		setCheckBox dpiMain, cbNameIndex,  fNameIndex,  strmap(STR_HTMLINDEX), 204, 116
		gosub *evCheck
		
		setStaticBox dpiMain, 4, 147, WIN_SX - 8, 1
		hSeparator = objinfo_hwnd(stat)
		setButton dpiMain, *dispHelp, strmap(STR_HELP), 8, 155, 100, 26
		setButton dpiMain, *export, strmap(STR_EXPORT), 292, 155, 100, 26, 1
		
		dpi_change dpiMain
		gsel 0, 1
		stop
	}
*byebye
	if (ginfo_act == 1) {
		closeDialog
		return
	}
	end
	end

*evKey
	if (lparam >> 30 == 0) {
		switch ginfo_act
		case 0
			if (wparam == 13) {
				gosub *export
			}
			swbreak
		case 1
			if (wparam == 13 || wparam == 27) {
				closeDialog
			}
			swbreak
		swend
	}
	return

*evGetMinMaxInfo
	return 0 ; HSPのリサイズ制限避け

#deffunc setCtlColorStatic int _lp, int _wp, local _h
	_h = GetSysColorBrush(15) ; COLOR_BTNFACE
	switch _lp
	case hTextSrcPath
	case hTextOutDir
		SetBkMode _wp, 1 ; TRANSPARENT
		swbreak
	case hSeparator
		_h = GetSysColorBrush(16) ; COLOR_BTNSHADOW
		swbreak
	swend
	return _h

*evCtlColorStatic
	setCtlColorStatic lparam, wparam
	return stat

*evDpiChanged
	dpi_wmchanged dpiMain
	return 0

#deffunc clearMainWinBg local _id, local _dc, local _oo
	_id = ginfo_sel
	gsel 0
	_dc = GetDC(hwnd)
	_oo = SelectObject(_dc, GetSysColorBrush(15/*COLOR_BTNFACE*/))
	Rectangle _dc, -1, -1, ginfo_winx + 1, ginfo_winy + 1
	ReleaseDC hwnd, _dc
	SelectObject _dc, _oo
	gsel _id
	return

*evPaint
	clearMainWinBg
	return

*evCheck
	fDebugMode = getCheck(cbDebugMode)
	fAxOnly = getCheck(cbAxOnly)
	enableCheck cbDebugMode, fAxOnly ^ 1
	enableCheck cbAutoResize, (fAxOnly | fDebugMode) ^ 1
	enableCheck cbNameIndex, fAxOnly ^ 1
	return

#deffunc loadDropFile int _h, local _f
	sdim _f, 512
	DragQueryFile _h, 0, varptr(_f), 512
	setSrcFile cnvwtos(_f)
	DragFinish _h
	return

*evDropFiles
	loadDropFile wparam
	return

*selectScrFile
	dialog "hsp", 16, strmap(STR_HSPSCRIPT)
	if (stat) {
		setSrcFile refstr
	}
	return

#deffunc setSrcFile str _f
	srcFile = _f
	setWinText hSrcFile, _f
	return

/* 
	proj
		start.hsp （ソーススクリプト）
		img.png
		data
			data.png
		public （以下出力フォルダ、projフォルダの外に出力可）
			start.html （名前変更可、indexオプションが優先される）
			dish （名前変更可）
				style.css
				hsp3dish.js
				load.js
			start （名前変更可）
				start.ax （名前変更可、indexオプションが無効の場合htmlと同名になる）
				img.png
				data
					data.png
*/   
*export
	srcFile = strtrim(srcFile, 3, '\"')
	srcFile = toFullPath(strtrim(srcFile))
	exist srcFile
	if (strsize < 0) {
		INFO_DIALOG strmap(STR_NOSCRIPT)
		return
	}
	srcName = getpath(srcFile, 9)
	srcDir = getpath(srcFile, 32)

	chdir srcDir

	if (fNoWin == 0) {
		outDir = getWinText(hOutDir)
	}

	outDir = strtrim(outDir, 3, '\"')
	outDir = strtrim(outDir)
	if (outDir == "") {
		INFO_DIALOG strmap(STR_NOOUTDIR)
		return
	}
	outDir = toFullPath(strtrim(outDir)) + "\\"
	if (outDir == srcDir) {
		INFO_DIALOG strf(strmap(STR_INVALIDFOLDER), outDir)
		return
	}
	
	loadIni HSP3DISH_INI

	fUTF8 = int(getIniData("UTF8", "0")) ; UTF-8 のスクリプトを使用
	fname = getpath(getIniData("StartName", srcName), 9) ; 出力する.ax,.htmlファイル名
	axname = fname + ".ax"

	; コンパイル、ax出力
	hsc_ini srcFile
	hsc_refname getpath(srcFile, 8)
	hsc_objname axname
	hsc_comp 4 * (fUTF8 == 0), 32 * (fUTF8 != 0)
	if (stat) {
		dispCompErr
		return
	}

	sdim runtime
	hsc3_getruntime runtime, axname
	runtime = getpath(runtime, 25)
	if (runtime != "hsp3dish" && runtime != "hsp3gp") {
		INFO_DIALOG strmap(STR_INVALIDRUNTIME)
		return
	}

	sdim dataDirs
	getDataDir dataDirs
	if (stat < 0) {
		INFO_DIALOG strf(strmap(STR_INVALIDFOLDER), outDir)
		return
	}
	numdir = stat

	; ランタイム(js,css)を出力するフォルダと、
	; プロジェクトファイル(ax,データファイル)を出力するフォルダ
	dishOutFolder = getpath(getIniData("OutDishFolder", "dish"), 9)
	projOutFolder = getpath(getIniData("OutProjFolder", srcName), 9)
	if (getpath(dishOutFolder, 16) == getpath(projOutFolder, 16)) {
		INFO_DIALOG strmap(STR_INVALIDDIR_DISHDATA)
		return
	} else {
		dishOutDir = outDir + dishOutFolder + "\\"
		projOutDir = outDir + projOutFolder + "\\"
	}
	
	if (fAxOnly) {
		INFO_DIALOG strf(strmap(STR_MAKEAX), axname)
		if (dirExists(projOutDir)) {
			bcopyEx axname, projOutDir + axname
			if (stat == 0) {
				ERR_DIALOG strf(strmap(STR_FAILCOPYAX), axname)
			}
		}
		return
	}

	makeDir projOutDir
	if (stat) {
		bcopyEx axname, projOutDir + axname
		if (stat == 0) {
			ERR_DIALOG strf(strmap(STR_FAILCOPYAX), axname)
		}
	} else {
		ERR_DIALOG strf(strmap(STR_FAILMAKEDIR), projOutDir)
	}

	sdim dataExts
	getDataExt dataExts
	numext = stat

	sdim ignFiles
	getIgnoreFile ignFiles
	numign = stat

	sdim prefiles, 3200
	if (numdir > 0 && numext > 0) {
		copyDataFileAll
	}

	sdim dishFiles, 64, 4 ; hsp3dish*.js, hsp3dish*.wasm, load.js, style.css
	copyRuntime
	makeHtml

	INFO_DIALOG strmap(STR_SUCCESSEXPORT)
	return

*dispHelp
	exec SITEURL, 16
	return

#deffunc loadCmdline local _num
	splitString dir_cmdline
	_num = stat
	sdim clparams
	repeat _num
		clparams(cnt) = getSplitString(cnt)
	loop
	return

#defcfunc getCmdlinePrm str _p, local _res
	_res = 0
	foreach clparams
		if (peek(clparams(cnt)) != '/') : continue
		if (strtrim(clparams(cnt), 1, '/') == _p) {
			_res = 1
			break
		}
	loop
	return _res

#defcfunc getCmdlineVal str _p, local _res, local _prm, local _val
	_res = ""
	foreach clparams
		if (peek(clparams(cnt)) != '/') : continue
		getBothSides _prm, _val, strtrim(clparams(cnt), 1, '/')
		if (_prm == _p) {
			_res = _val
			break
		}
	loop
	return _res

#defcfunc getCmdlinePath local _res
	_res = ""
	foreach clparams
		if (peek(clparams(cnt)) != '/') {
			_res = clparams(cnt)
			break
		}
	loop
	return _res

#deffunc setLang str _lang, local _f
	if (_lang != "") {
		_f = "lang_" + _lang + ".txt"
		exist _f
		if (strsize > 0) {
			strexchange _f
		}
	}
	return

#deffunc dispVerDlg local _ts, local _s, local _mbp
	_ts = strf("%s %s\n\n", APPNAME, APPVER)
	_ts += strf("Build: date %s %s HSP ver.%x", __date__, __time__, hspver)
	_s = "About"
	_mbp = 40, hwnd, hinstance, varptr(_ts), varptr(_s), $80/*MB_USERICON*/, 128
	MessageBeep $40/*MB_ICONINFORMATION*/
	MessageBoxIndirect _mbp
	return

#deffunc dispCompErr local _n, local _buf
	_n = 0
	hsc3_messize _n
	sdim _buf, _n
	hsc_getmes _buf
	INFO_DIALOG strf("%s\n\n%s", strmap(STR_ERRCOMPILE), cnvatos(_buf))
	return

#deffunc getDataDir array _dirs, local _num, local _dir
	; データフォルダ（ソースフォルダからの相対）
	; ソースフォルダもしくはその直下のフォルダでなければならない
	; ソースフォルダ以外のフォルダはサブフォルダも検索対象になる
	_num = 0
	getIniDataFiles _dirs, "DataFolder", ".\\|data|res"
	repeat stat
		_dir = toFullPath(_dirs(cnt)) + "\\"
		if (dirExists(_dir) && instr(_dir, 0, srcDir) == 0) {
			; データフォルダが存在かつソースフォルダ内にある
			if (_dir != srcDir) {
				if (instr(outDir, 0, _dir) == 0) {
					; データフォルダと出力フォルダが同じか 
					; データフォルダ内に出力フォルダがある
					_num = -1
					break
				}
			}
			getstr _dirs(_num), _dir, strlen(srcDir)
			_num++
		}
	loop
	return _num

#deffunc getDataExt array _exts, local _num
	; データファイルのリストアップ対象の拡張子（拡張子なしはアンダーバー）
	getIniDataFiles _exts, "DataExtensions", "bmp|png|jpg|jpeg|wav|mp3|ogg|gpb|material|frag|vert|ttf"
	_num = stat
	repeat _num
		if (_exts(cnt) == "_") {
			_exts(cnt) = ""
		} else {
			_exts(cnt) = "." + _exts(cnt)
		}
	loop
	return _num

#deffunc getIgnoreFile array _fs, local _num, local _i, local _ext
	; データフォルダから無視するファイル
	; 各階層のファイルが対象になる (img.png -> img.png, data\img.png, res\img.png, ...)
	_num = 0
	getIniDataFiles _fs, "IgnoredFiles", "obj|hsptmp|packfile"
	repeat stat : _i = cnt
		_ext = getpath(_fs(_i), 2)
		repeat numext
			if (_ext == dataExts(cnt)) {
				_fs(_num) = _fs(_i)
				_num++
			}
		loop
	loop
	return _num

#deffunc copyDataFileAll local _pf, local _dir, local _list, local _num, local _ls, local _df, local _ext
	newmod _pf, vlstring, 4096
	repeat numdir
		_dir = dataDirs(cnt)
		if (_dir == "") {
			listFolders _list
		} else {
			chdir _dir
			listFolders _list, SUBDIRLV_MAX
		}
		_num = stat
		newmod _ls, nexliner, _list
		repeat _num
			getNextLine _ls, _df
			_ext = getpath(_df, 18)
			repeat numext
				if (_ext != dataExts(cnt)) : continue
				if (checkIgnoreFiles(_df)) : break
				copyDataFile _dir + _df, _pf
			loop
		loop
		delmod _ls
		chdir srcDir
	loop
	prefiles += getString(_pf)
	delmod _pf
	if (prefiles != "") {
		poke prefiles, strlen(prefiles) - strlen(",") ; 最後のコンマを削除
	}
	return

#defcfunc checkIgnoreFiles str _p, local _n, local _f
	if (numign) {
		_n = 0
		_f = getpath(_p, 24)
		repeat numign
			if (_f == ignFiles(cnt)) {
				_n++
				break
			}
		loop
		return _n
	}
	return 0

#deffunc copyDataFile str _f, var _pf, local _odf, local _odd, local _vf
	_odf = projOutDir + _f
	_odd = getpath(_odf, 32)
	makeDir _odd
	if (stat == 0) {
		ERR_DIALOG strf(strmap(STR_FAILMAKEDIR), _odd)
	}
	bcopyEx srcDir + _f, _odf
	if (stat == 0) {
		ERR_DIALOG strf(strmap(STR_FAILCOPYAX), _f)
	}
	_vf = _f
	strrep _vf, "\\", "/"
	catString _pf, strf("'%s',", _vf)
	return

#deffunc copyRuntime local _sf
	makeDir dishOutDir
	if (stat == 0) {
		ERR_DIALOG strf(strmap(STR_FAILMAKEDIR), dishOutDir)
	}
	if (runtime == "hsp3gp") {
		_sf = "-gp"
	} else {
		_sf = ""
	}
	dishFiles(0) = "hsp3dish" + _sf + ".js"
	dishFiles(1) = "hsp3dish" + _sf + ".wasm"
	dishFiles(2) = "load.js"
	dishFiles(3) = "style.css"
	foreach dishFiles
		bcopyEx exeDir + DIR_HSPJS + "\\" + dishFiles(cnt), dishOutDir + dishFiles(cnt)
		if (stat == 0) {
			ERR_DIALOG strf(strmap(STR_FAILCOPYAX), dishFiles(cnt))
		}
	loop
	return

#deffunc makeHtml local _fn, local _buf, local _env, local _x, local _y, local _cts
	_fn = exeDir + DIR_HSPJS + "\\temp.html"
	exist _fn
	if (strsize < 0) {
		INFO_DIALOG strf(strmap(STR_FILENOTEXIST), _fn)
		return
	}
	sdim _buf, strsize * 3
	bload _fn, _buf
	sdim _env
	_x = getIniData("wx", "640")
	_y = getIniData("wy", "480")
	_env += strf("\"HSP_WX\":\"%s\",\"HSP_WY\":\"%s\",", _x, _y)
	_x = getIniData("sx", _x)
	_y = getIniData("sy", _y)
	_env += strf("\"HSP_SX\":\"%s\",\"HSP_SY\":\"%s\",", _x, _y)
	_env += strf("\"HSP_LIMIT_STEP\":\"%s\"", getIniData("step", "5000"))
	getHtmlContents _cts, _x, _y
	strrep _buf, "___DISH_ENV___",      _env
	strrep _buf, "___TITLE___",         getIniData("Title", fname)
	strrep _buf, "___CANVAS_WIDTH___",  _x
	strrep _buf, "___CANVAS_HEIGHT___", _y
	strrep _buf, "___DIR_PREDATA___",   projOutFolder
	strrep _buf, "___AX_FILE___",       fname + ".ax"
	strrep _buf, "___PRELOAD_FILES___", prefiles
	strrep _buf, "___CSS___",           dishOutFolder + "/" + dishFiles(3)
	strrep _buf, "___JS_LOAD___",       dishOutFolder + "/" + dishFiles(2)
	strrep _buf, "___JS_DISH___",       dishOutFolder + "/" + dishFiles(0)
	strrep _buf, "___HTML_HEAD___",     _cts(0)
	strrep _buf, "___HTML_FOOT___",     _cts(1)
	strrep _buf, "___RESIZABLE___",     _cts(2)
	strrep _buf, "___STYLE___",         _cts(3)
	if (fNameIndex) {
		_fn = "index"
	} else {
		_fn = fname
	}
	bsave outDir + _fn + ".html", _buf, strlen(_buf)
	return

#deffunc getHtmlContents array _cts, str _x, str _y, local _s
	sdim _cts, 64, 4 ; head, foot, resize, style
	_s = getIniData("StyleTextColor", "")
	if (_s != "") {
		_cts(3) += strf("body{color:%s;}#spinner{border-color:%s;}", _s, _s)
	}
	_s = getIniData("StyleBgColor", "")
	if (_s != "") {
		_cts(3) += strf("body{background-color:%s;}", _s)
	}
	_cts(3) += getIniData("Style", "")
	if (fAutoResize == 1 && fDebugMode == 0) {
		_cts(2) += "true"
		_cts(3) += "*{margin:0;}#header,#footer{display:none;}"
	} else {
		if (fDebugMode) {
			_cts(1) += "<textarea id=\"output\" rows=\"8\"></textarea><br>"
		}
		_cts(2) += "false"
		_cts(3) += strf(".emscripten_border{weight:%spx;height:%spx;}", _x, _y)
		_cts(0) += getIniData("HtmlHeader", "")
		_cts(1) += getIniData("HtmlFooter", "")
	}
	return
